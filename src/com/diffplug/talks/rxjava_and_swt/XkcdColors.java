/*
 * Copyright 2015 DiffPlug
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.diffplug.talks.rxjava_and_swt;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.URL;
import java.nio.charset.StandardCharsets;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.concurrent.CompletionStage;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.eclipse.swt.SWT;
import org.eclipse.swt.graphics.RGB;
import org.eclipse.swt.widgets.Widget;

import com.google.common.collect.Maps;

import com.diffplug.common.base.Errors;

/**
 * Represents the name to RGB mapping which was generated by the
 * <a href="http://blog.xkcd.com/2010/05/03/color-survey-results/">XKCD
 * color mapping.</a>
 */
public class XkcdColors {
	/** Loads an instance of the colors. */
	public static XkcdColors load() {
		URL url = XkcdColors.class.getResource("/xkcd_colors.txt");
		return Errors.rethrow().get(() -> new XkcdColors(url));
	}

	private final Map<String, RGB> colors = new HashMap<>(1024);

	private XkcdColors(URL url) throws IOException {
		try (InputStream stream = url.openStream();
				BufferedReader reader = new BufferedReader(new InputStreamReader(stream, StandardCharsets.UTF_8));) {
			String line = reader.readLine();
			while (line != null) {
				if (!line.startsWith("#")) {
					int idx = line.indexOf('\t');
					String name = line.substring(0, idx);
					String hex = line.substring(idx + 1);
					colors.put(name, parse(hex));
				}
				line = reader.readLine();
			}
		}
	}

	/** Parses an RGB value from a hex value (e.g. {@code ff0010}). */
	static RGB parse(String hex) {
		return new RGB(
				Integer.valueOf(hex.substring(0, 2), 16),
				Integer.valueOf(hex.substring(2, 4), 16),
				Integer.valueOf(hex.substring(4, 6), 16));
	}

	/** Returns an RGB triplet which matches the given color name, if it matches any name. */
	public Optional<RGB> rgbForName(String name) {
		return Optional.ofNullable(colors.get(name));
	}

	/** Returns the color name closest to the given RGB triplet (eventually...). */
	public Collection<Map.Entry<String, RGB>> all() {
		return colors.entrySet();
	}

	public static class Lookup {
		final XkcdColors colors = load();
		final ExecutorService executor;

		public Lookup(Widget lifecycle) {
			this.executor = Executors.newSingleThreadExecutor();
			lifecycle.addListener(SWT.Dispose, e -> {
				executor.shutdown();
			});
		}

		/** Returns the XkcdColor which is closest to the given RGB. */
		public CompletionStage<Map.Entry<String, RGB>> get(RGB rgb) {
			return CompletableFuture.supplyAsync(() -> closestTo(rgb), executor);
		}

		/** Iterates over all XkcdColor entries to find the closest color by brute-force. */
		private Map.Entry<String, RGB> closestTo(RGB rgb) {
			Errors.log().run(() -> Thread.sleep(10));
			return colors.all().stream()
					.map(entry -> Maps.immutableEntry(distance(entry.getValue(), rgb), entry))
					.min(Comparator.comparing(Map.Entry::getKey))
					.get().getValue();
		}

		/** Computes the distance-squared between the two colors. */
		private static int distance(RGB a, RGB b) {
			int deltaR = a.red - b.red;
			int deltaG = a.green - b.green;
			int deltaB = a.blue - b.blue;
			return (deltaR * deltaR) + deltaG * deltaG + deltaB * deltaB;
		}
	}
}

buildscript {
	repositories {
		mavenLocal()
		jcenter()
		// SNAPSHOT versions are free to rely on other SNAPSHOT libraries
		if (project.version.endsWith('-SNAPSHOT')) {
			maven {
				url 'https://oss.sonatype.org/content/repositories/snapshots/'
			}
			configurations.all {
				resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
			}
		}
	}

	dependencies {
		classpath 'com.diffplug.gradle:goomph:1.2.0'
		classpath "com.diffplug.durian:durian-swt:${VER_DURIAN_SWT}"
	}
}

plugins {
	// osgi
	id "org.jruyi.osgibnd" version "0.4.0"
	// code formatting
	id "com.diffplug.gradle.spotless" version "1.3.0"
}

repositories {
	mavenCentral()
}

//////////
// JAVA //
//////////
apply plugin: 'java'
sourceSets {
	main {
		java {		srcDir 'src'		}
		resources {	srcDir 'resources'	}
	}
	test { java {
			srcDir 'test'
	} }
}
sourceCompatibility = VER_JAVA
targetCompatibility = VER_JAVA

dependencies {
	compile "com.diffplug.durian:durian:${VER_DURIAN}"
	compile "com.diffplug.durian:durian-rx:${VER_DURIAN_RX}"
	compile "com.diffplug.durian:durian-swt:${VER_DURIAN_SWT}"

	testCompile "junit:junit:${VER_JUNIT}"
}

// SWT dependencies
apply plugin: 'com.diffplug.gradle.swt'

//////////
// OSGI //
//////////
jar.manifest {
	attributes (
		'Export-Package': '',
		'Bundle-SymbolicName': "${project.group}.${project.name}",
		'Bundle-RequiredExecutionEnvironment': 'JavaSE-1.8',
		'Bundle-Vendor': 'DiffPlug',
		'Bundle-DocURL': "https://github.com/${project.org}/${project.name}",
		'Bundle-License': "https://github.com/${project.org}/${project.name}/blob/v${project.version}/LICENSE",
		'-removeheaders': 'Bnd-LastModified,Bundle-Name,Created-By,Tool'
	)
}
// copy the manifest into the WC
jar << {
	def jarContent = java.nio.file.FileSystems.newFileSystem(jar.archivePath.toPath(), null);
	def outputFile = project.file('META-INF/MANIFEST.MF')
	def source = jarContent.getPath('META-INF/MANIFEST.MF')
	java.nio.file.Files.copy(source, outputFile.toPath(), java.nio.file.StandardCopyOption.REPLACE_EXISTING);
}

/////////////
// ECLIPSE //
/////////////
apply plugin: 'eclipse'
eclipse {
	project {
		natures 'org.eclipse.pde.PluginNature'
		natures 'org.eclipse.jdt.core.javanature'

		buildCommand 'org.eclipse.jdt.core.javabuilder'
		buildCommand 'org.eclipse.pde.ManifestBuilder'
		buildCommand 'org.eclipse.pde.SchemaBuilder'
	}
	classpath {
		downloadSources true
		downloadJavadoc true
	}
	jdt {
		sourceCompatibility VER_JAVA
		targetCompatibility VER_JAVA
	}
}
// always create fresh projects
tasks.eclipse.dependsOn(cleanEclipse)

////////////
// FORMAT //
////////////
apply plugin: 'com.diffplug.gradle.spotless'
spotless {
	java {
		licenseHeaderFile	'spotless.license.java'			// License header file
		importOrderFile		'spotless.importorder'			// An import ordering file, exported from Eclipse
		eclipseFormatFile	'spotless.eclipseformat.xml'	// XML file dumped out by the Eclipse formatter
		// Eclipse formatter puts excess whitespace after lambda blocks
		//    funcThatTakesLambdas(x -> {} , y -> {} )	// what Eclipse does
		//    funcThatTakesLambdas(x -> {}, y -> {})	// what I wish Eclipse did
		custom 'Lambda fix', { it.replace('} )', '})').replace('} ,', '},') }
	}
	format 'misc', {
		target '**/.gitignore', '**/*.gradle', '**/*.md', '**/*.sh'
		indentWithTabs()
		trimTrailingWhitespace()
		endWithNewline()
	}
	freshmark {}
}

//////////////
// FINDBUGS //
//////////////
apply plugin: 'findbugs'
findbugs {
	toolVersion = VER_FINDBUGS
	sourceSets = [sourceSets.main]	// don't check the test code
	ignoreFailures = false 	// bug free or it doesn't ship!
	reportsDir = file('build/findbugs')
	effort = 'max'			// min|default|max
	reportLevel = 'low'		// low|medium|high (low = sensitive to even minor mistakes)
	omitVisitors = []		// bugs that we want to ignore
}
// HTML instead of XML
tasks.withType(FindBugs) {
	reports {
		xml.enabled = false
		html.enabled = true
	}
}
// we'll want the findbugs annotations (they don't have a 3.0.1 version)
dependencies {
	compile 'com.google.code.findbugs:annotations:3.0.0'
	compile 'com.google.code.findbugs:jsr305:3.0.0'
}

/////////////////////////
// INTERACTIVE TESTING //
/////////////////////////

// setup the test categories
test {
	useJUnit {
		excludeCategories 'com.diffplug.common.swt.InteractiveTest'
	}
}
task interactiveTest(type: Test) {
	systemProperty 'com.diffplug.test.autoclose', null
	useJUnit {
		includeCategories 'com.diffplug.common.swt.InteractiveTest'
	}
}
task headlessTest(type: Test) {
	systemProperty 'com.diffplug.test.autoclose.milliseconds', '500'
	useJUnit {
		includeCategories 'com.diffplug.common.swt.InteractiveTest'
	}
	test.ignoreFailures false
}
